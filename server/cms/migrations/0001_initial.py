# Generated by Django 4.1.7 on 2023-05-27 05:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicalEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=20)),
                ('equipment_type', models.CharField(choices=[('ECG', 'Electrocardiograma'), ('BP', 'Monitor de presion sanguinea'), ('SP', 'Estetoscopio'), ('OT', 'Tanque de oxigeno')], max_length=4)),
                ('manufacturer', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('calibration_date', models.DateField()),
                ('last_service_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='MenuSubItem2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('url', models.URLField()),
                ('icon', models.CharField(max_length=50, null=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cms.menusubitem2')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalEquipments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipo', models.CharField(max_length=100)),
                ('marca', models.CharField(max_length=50)),
                ('modelo', models.CharField(max_length=6)),
                ('no_serie', models.IntegerField()),
                ('servicio_ult', models.DateField()),
                ('servicio_prox', models.DateField()),
                ('estado', models.CharField(choices=[('activo', 'Activo'), ('pendiente', 'Pendiente'), ('urgente', 'Urgente')], max_length=10)),
                ('area', models.CharField(max_length=50)),
                ('subarea', models.CharField(max_length=50)),
                ('encargado', models.CharField(max_length=50)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalEquipmentDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instalacion_fecha', models.DateField()),
                ('anios_operando', models.IntegerField()),
                ('ultima_actualizacion', models.DateTimeField()),
                ('estatus', models.CharField(max_length=100)),
                ('ubicacion', models.CharField(max_length=200)),
                ('sub_ubicacion', models.CharField(max_length=200)),
                ('pertenencia', models.CharField(max_length=200)),
                ('duenio', models.CharField(max_length=200)),
                ('vendido_por', models.CharField(max_length=200)),
                ('adquisicion', models.DateField()),
                ('precio_compra', models.DecimalField(decimal_places=2, max_digits=10)),
                ('divisas', models.CharField(max_length=5)),
                ('frecuencia_mprev', models.CharField(max_length=200)),
                ('ultimo_mprev', models.DateField()),
                ('proximo_mprev', models.DateField()),
                ('riesgo', models.CharField(max_length=200)),
                ('cricticidad', models.CharField(max_length=200)),
                ('provedor', models.CharField(max_length=200)),
                ('garantia', models.CharField(max_length=200)),
                ('accesorios', models.CharField(max_length=200)),
                ('equipo', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='cms.medicalequipment')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
